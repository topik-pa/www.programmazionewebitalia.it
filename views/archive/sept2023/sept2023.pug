extends ../../layout.pug

block append meta
  title #{title} | #{proj_name}
  meta(name="description" content="")
  meta(name="keywords" content="")
  meta(name="robots" content="")
  link(rel="canonical", href=proj_url + url)

  meta(name="og:url" content="")
  meta(name="og:type" content="")
  meta(name="og:title" content="")
  meta(name="og:site_name" content="")
  meta(name="og:description" content="")
  meta(name="og:image" content="")

block main
  section(class="content")
    h1 #{title}
    div(class="post")
      div(class="badge js") #[a(href="/javascript", title="JavaScript") JavaScript]
      h2
        a(href="/javascript-closure", title="Le Closure in JavaScript") Le Closure in JavaScript
      a(href="/javascript-closure", title="Le Closure in JavaScript") 
          img(src="/assets/images/post/post-js-closure-cover-min.png", alt="Le Closure in JavaScript")
      p Tutte le volte che ho dovuto affrontare il discorso CLOSURE in JS finivo per avere una impressione riassumibile nella frase: "Tutto molto bello, ma... QUINDI?"
      h3 Cosa sono le closure in JavaScript?
      p Una closure è la capacità di una funzione, definita all'interno di un'altra funzione contenitrice, di accedere allo scope della funzione esterna, anche dopo che questa ha cessato la sua esecuzione. Attraverso le closure (ed ad un apposito handler), insomma, posso accedere allo scope (metodi e attributi) di una funzione (quella contenitrice) da un qualsiasi ambito esterno. #[a(href="/javascript-closure", title="Le Closure in JavaScript") Continua...]
      div(class="published") Pubblicato l'<time datetime="2023-08-08">8 Agosto 2023</time>
      
