div
  h1 #{title}
  div(class="intro-wrap")
    img(fetchpriority="high" class="cover" width="1200" height="630" src="/assets/images/post/" + serial + "-" + id + "/" + id + ".webp", alt=title, srcset='/assets/images/post/' + serial + '-' + id + '/' + id + '.webp' + ' 1200w,' + '/assets/images/post/' + serial + '-' + id + '/' + id + '-m.webp' + ' 1024w,' + '/assets/images/post/' + serial + '-' + id + '/' + id + '-s.webp' + ' 768w', sizes="(max-width: 768px) 100vw, (max-width: 1024px) 75vw, 50vw")

    p(class="intro marisa") Una modalità nativa per gestire i dialogi modali (o non modali) all'interno delle nostre applicazioni... Finalmente si possono evitare soluzioni custom o di terze parti e focalizzarsi maggiormente sulle funzionalità core! #[img(src="assets/images/marisa-talk.webp", alt="Marisa dice...", width="100", height="100")]


section
  h2 Introduzione
  p La gestione di popup e finestre modali è sempre stata una sfida per gli sviluppatori web. Tradizionalmente, #[em questi elementi richiedevano combinazioni di HTML, CSS e JavaScript] creati ad hoc dallo sviluppatore per funzionare correttamente. Con l'introduzione dell'elemento &lt;dialog&gt; in HTML5, #[em questa complessità viene ridotta], offrendo #[em una soluzione nativa e standard per creare finestre di dialogo] accessibili e facili da gestire. In questo articolo esploreremo come utilizzare &lt;dialog&gt; e quali vantaggi offre.


section 
  h2 Cos'è l'elemento &lt;dialog&gt;
  p L'elemento &lt;dialog&gt; è progettato per creare finestre di dialogo, sia modali che non modali. Si tratta di un elemento nativo che offre un supporto integrato per mostrare contenuti sopra il resto della pagina, bloccando l'interazione con gli elementi sottostanti nel caso di dialoghi modali.
  p I vantaggi principali dell'utilizzare questo tag HTML possono essere riassunti in una accessibilità migliorata grazie al focus gestito automaticamente; nella semplificazione del codice, che ora non necessita di librerie esterno o implementazioni ad-hoc e nel supporto di funzionalità native come il comportamento modale e non modale.
        
      
  h3 Come utilizzare il tag &lt;dialog&gt;: un esempio concreto
  p Ecco un esempio di base per creare una finestra di dialogo. Il codice è piuttosto conciso e semplice da comprendere anche se viene coinvolto sia codice HTML che JavaScript.
  div(class="code")
    h3 Creare una finestra di dialogo attraverso il tag &lt;dialog&gt;
    pre 
      code(class="language-html") 
        | &lt;dialog id="myDialog"&gt;
        |   &lt;p&gt;Questo è un dialogo semplice.&lt;/p&gt;
        |   &lt;button id="closeDialog"&gt;Chiudi&lt;/button&gt;
        | &lt;/dialog&gt;
        | 
        | &lt;button id="openDialog"&gt;Apri il dialogo&lt;/button&gt;
        | 
        | &lt;script&gt;
        |   const dialog = document.getElementById('myDialog');
        |   const openButton = document.getElementById('openDialog');
        |   const closeButton = document.getElementById('closeDialog');
        |  
        |   openButton.addEventListener('click', () =&gt; dialog.showModal());
        |   closeButton.addEventListener('click', () =&gt; dialog.close());
        | &lt;/script&gt;
        |
  p La spiegazione è semplice: i metodi #[code show()] o #[code showModal()] (a seconda del caso si voglia un comportamento modale o no) si occupano di aprire la finestra di dialogo, mentre il metodo #[code close()] si occupa (guarda un po') di chiuderla. 


section 
  h2 Accessibilità e usabilità
  p L'elemento &lt;dialog&gt; è stato #[em progettato con l'accessibilità in mente].
  ul
    li Quando un dialogo è aperto, il focus è automaticamente spostato al suo interno.
    li Gli utenti non possono interagire con gli elementi al di fuori di un dialogo modale.
    li Per migliorare l'accessibilità, è possibile usare attributi aria, come aria-labelledby e aria-describedby.
  p Ecco un esempio di dialogo che utilizza attributi aria.
  div(class="code")
    h3 Una finestra di dialogo che utilizza gli attributi aria
    pre 
      code(class="language-html") 
        | &lt;dialog aria-labelledby="dialogTitle" aria-describedby="dialogDesc"&gt;
        |   &lt;h2 id="dialogTitle"&gt;Titolo del dialogo&lt;/h2&gt;
        |   &lt;p id="dialogDesc"&gt;Descrizione del contenuto del dialogo.&lt;/p&gt;
        |   &lt;button&gt;Chiudi&lt;/button&gt;
        | &lt;/dialog&gt;
        | 


  h3 Stile e personalizzazione con CSS
  p Ovviamente, anche lo stile dell'elemento &lt;dialog&gt; è #[em personalizzabile attraverso il CSS], in tal senso è interessante lo pseudoelemento #[code ::backdrop] che permette di selezionare lo sfondo presente dietro il dialogo aperto. Qui di seguito un semplice codice CSS per personalizzare la resa grafica del nostro dialogo e il suo sfondo.
  div(class="code")
    h3 Personalizzare lo stile di una finestra di dialogo (e uso di ::backdrop)
    pre 
        code(class="language-css") 
          | dialog {
          |   border: none;
          |   border-radius: 8px;
          |   padding: 20px;
          |   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
          | }
          |
          | ::backdrop {
          |   background-color: rgba(0, 0, 0, 0.5);
          | }
          |

section
  h2 Compatibilità tra browser
  ul 
    li Google Chrome &ge; 37
    li Microsoft Edge &ge; 79
    li Safari (macOS/iOS) &ge; 15
    li Firefox &ge; 98
    li Opera &ge; 24
    li Internet Explorer - Non supportato
  p Al momento, &lt;dialog&gt; è supportato dalla maggior parte dei browser moderni, inclusi Chrome, Edge e Firefox. Tuttavia, per garantire il funzionamento su browser meno recenti, è possibile utilizzare un polyfill, come #[a(class="ext", href="https://www.npmjs.com/package/dialog-polyfill/v/0.4.5") quello fornito da Google] 


section 
  h2 Conclusione 
  p Il nuovo elemento &lt;dialog&gt; di HTML5 semplifica notevolmente la gestione di popup e modali, migliorando l'accessibilità e riducendo la necessità di codice complesso. Con il supporto dei browser moderni e la possibilità di aggiungere polyfill, non ci sono scuse per non adottare questa nuova funzionalità nei tuoi progetti.